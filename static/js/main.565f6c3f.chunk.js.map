{"version":3,"sources":["TypingTests.js","Typer.js","serviceWorker.js","index.js"],"names":["TypingTests","pangrams","quotes","text","author","Typer","className","React","Component","TyperTextArea","props","handleChange","bind","state","active","background","cpm","curTime","incorrectness","startTime","value","obj","this","Math","floor","random","length","setState","getTest","e","Date","interval","setInterval","updateTime","target","clearInterval","checkIncorrectness","keyCode","inputText","substring","isIncorrect","str","replace","round","onClick","pangramState","setTimeout","readOnly","toFixed","autoFocus","placeholder","style","borderColor","onKeyDown","handleKeyDown","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.565f6c3f.chunk.js","sourcesContent":["const TypingTests = {\r\n\tpangrams: [\r\n\t\t\"The quick brown fox jumps over the lazy dog\",\r\n\t\t\"Quick zephyrs blow, vexing daft Jim\",\r\n\t\t\"Sphinx of black quartz, judge my vow\",\r\n\t\t\"The job requires extra pluck and zeal from every young wage earner\"\r\n\t],\r\n\tquotes: [\r\n\t\t{\r\n\t\t\ttext: \"If life were predictable it would cease to be life, and be without flavor.\",\r\n\t\t\tauthor: \"Eleanor Roosevelt\"\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: \"Many of life's failures are people who did not realize how close they were to success when they gave up.\",\r\n\t\t\tauthor: \"Thomas A. Edison\"\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: \"I'm selfish, impatient and a little insecure. I make mistakes, I am out of control and at times hard to handle. But if you can't handle me at my worst, then you sure as hell don't deserve me at my best.\",\r\n\t\t\tauthor: \"Marilyn Monroe\"\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: \"In three words I can sum up everything I've learned about life: it goes on.\",\r\n\t\t\tauthor: \"Robert Frost\"\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: \"I've learned that people will forget what you said, people will forget what you did, but people will never forget how you made them feel.\",\r\n\t\t\tauthor: \"Maya Angelou\"\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext: \"All the great things are simple, and many can be expressed in a single word: freedom, justice, honor, duty, mercy, hope.\",\r\n\t\t\tauthor: \"Winston Churchill\"\r\n\t\t}\r\n\t]\r\n}\r\n\r\nexport default TypingTests;","import React from 'react';\r\nimport './Typer.css';\r\nimport TypingTests from './TypingTests'\r\n\r\nclass Typer extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Typer\">\r\n\t\t\t\t<h1>Type Tester</h1>\r\n\t\t\t\t<TyperTextArea />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nclass TyperTextArea extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\r\n\t\tthis.state = {\r\n\t\t\tactive: false,\r\n\t\t\tauthor: \"\",\r\n\t\t\tbackground: \"#ffffff24\",\r\n\t\t\tcpm: 0,\r\n\t\t\tcurTime: 0,\r\n\t\t\tincorrectness: false,\r\n\t\t\tpangrams: false,\r\n\t\t\tstartTime: 0,\r\n\t\t\ttext: \"\",\r\n\t\t\tvalue: \"\"\r\n\t\t};\r\n\t}\r\n\r\n\tgetTest() {\r\n\t\tlet obj = {};\r\n\t\tdo {\r\n\t\t\tif (this.state.pangrams) {\r\n\t\t\t\tobj.author = \"Anonymous\"\r\n\t\t\t\tobj.text = TypingTests.pangrams[Math.floor(Math.random() * TypingTests.pangrams.length)];\r\n\t\t\t} else {\r\n\t\t\t\tobj = TypingTests.quotes[Math.floor(Math.random() * TypingTests.quotes.length)];\r\n\t\t\t}\r\n\t\t} while (obj.text === this.state.text)\r\n\r\n\t\tthis.setState({\r\n\t\t\tauthor: obj.author,\r\n\t\t\ttext: obj.text\r\n\t\t});\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.getTest();\r\n\t}\r\n\r\n\thandleChange(e) {\r\n\t\tif (!this.state.active) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tactive: true,\r\n\t\t\t\tstartTime: new Date()\r\n\t\t\t});\r\n\t\t\tthis.interval = setInterval(() => this.updateTime(), 100);\r\n\t\t}\r\n\t\tthis.setState({ value: e.target.value });\r\n\r\n\t\tif (e.target.value === this.state.text) {\r\n\t\t\tclearInterval(this.interval);\r\n\t\t\tthis.setState({\r\n\t\t\t\tactive: false,\r\n\t\t\t\tvalue: \"\"\r\n\t\t\t});\r\n\t\t\tthis.getTest();\r\n\t\t\te.target.value = \"\";\r\n\t\t} else {\r\n\t\t\tthis.updateTime();\r\n\t\t\tthis.checkIncorrectness(e.target.value);\r\n\t\t}\r\n\t}\r\n\r\n\thandleKeyDown(e) {\r\n\t\tif (e.keyCode === 27) {\r\n\t\t\te.target.value = \"\";\r\n\t\t}\r\n\t}\r\n\r\n\tcheckIncorrectness(inputText) {\r\n\t\tthis.setState({\r\n\t\t\tbackground: (this.state.text.substring(0, inputText.length) === inputText) ? \"#ffffff24\" : \"red\"\r\n\t\t});\r\n\t}\r\n\r\n\tgetBackground() {\r\n\t\tif (!this.isIncorrect) {\r\n\t\t\treturn \"#ffffff24\";\r\n\t\t} else {\r\n\t\t\treturn \"red\";\r\n\t\t}\r\n\t}\r\n\r\n\tupdateTime() {\r\n\t\tthis.setState({ curTime: new Date()});\r\n\t\tlet str = this.state.value.replace(/\\s/g, '');\r\n\t\tthis.setState({cpm: (Math.round(str.length / ((this.state.curTime - this.state.startTime) / (1000 * 60))))});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"TyperTextArea\">\r\n\t\t\t\t<div className=\"pangramButton\"\r\n\t\t\t\tonClick={() => {\r\n\t\t\t\t\tconst pangramState = this.state.pangrams;\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tactive: false,\r\n\t\t\t\t\t\tcurTime: 0,\r\n\t\t\t\t\t\tpangrams: !pangramState,\r\n\t\t\t\t\t\tstartTime: 0,\r\n\t\t\t\t\t\tvalue: \"\"\r\n\t\t\t\t\t});\r\n\t\t\t\t\tclearInterval(this.interval);\r\n\t\t\t\t\tsetTimeout(() => {this.getTest()}, 50);\r\n\t\t\t\t}}>Select: {(this.state.pangrams) ? \"Pangrams\" : \"Quotes\"}</div>\r\n\r\n\t\t\t\t<textarea\r\n\t\t\t\treadOnly\r\n\t\t\t\tclassName=\"textToType\"\r\n\t\t\t\tvalue={this.state.text}></textarea>\r\n\r\n\t\t\t\t<p className=\"author\">- {this.state.author}</p>\r\n\r\n\t\t\t\t<p className=\"stats\">Time: {((this.state.curTime - this.state.startTime) / 1000).toFixed(2)} sec | CPM: {this.state.cpm} | WPM: {this.state.cpm / 5}</p>\r\n\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tautoFocus\r\n\t\t\t\t\tplaceholder=\"Type text here\"\r\n\t\t\t\t\tclassName=\"userInput\"\r\n\t\t\t\t\tstyle={{ borderColor: this.state.background }}\r\n\t\t\t\t\tonKeyDown={this.handleKeyDown}\r\n\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t>\r\n\t\t\t\t{this.state.value}\r\n\t\t\t\t</textarea>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nclass PangramSwitcher extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"PangramSwitcher\">\r\n\t\t\t\t<p>Pangrams</p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Typer;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Typer from './Typer'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Typer />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}